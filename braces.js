const expressions = [")(){}", "[]({})", "([])", "{()[]}", "([)]", "({[]}))(()","({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}{)}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]})({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}({[[({([()])})]]}){(((({}))))}{)}{"];

const bracesMap = new Map();
bracesMap.set("(", ")");
bracesMap.set("[", "]");
bracesMap.set("{", "}");
console.log("Supported Braces: ", bracesMap);

function isOpenBrace(char) {
  return bracesMap.get(char);
}

function isCloseBrace(char) {
  let charIndex = Array.from(bracesMap.values()).indexOf(char);
  if (charIndex === -1) {
    return undefined;
  } else {
    return Array.from(bracesMap.keys())[charIndex];
  }
}

// console.log(isOpenBrace("{")? true : false)//t
// console.log(isOpenBrace("}")? true : false)//f
// console.log(isCloseBrace("{")? true : false)//f
// console.log(isCloseBrace("}")? true : false)//t
// console.log()
// console.log(isOpenBrace("[")? true : false)//t
// console.log(isOpenBrace("]")? true : false)//f
// console.log(isCloseBrace("[")? true : false)//f
// console.log(isCloseBrace("]")? true : false)//t
// console.log()
// console.log(isOpenBrace("(")? true : false)//t
// console.log(isOpenBrace(")")? true : false)//f
// console.log(isCloseBrace("(")? true : false)//f
// console.log(isCloseBrace(")")? true : false)//t

function isBalanced(chararr, debug) {
  let openings = chararr.filter((v, i) => {
    return isOpenBrace(v) ? true : false;
  });
  let closings = chararr.filter((v, i) => {
    return isCloseBrace(v) ? true : false;
  });
  if (openings.length !== closings.length) {
    debug ? console.log("is not balanced") : null;
    return false;
  } else {
    //TODO: count and check
    debug ? console.log("is balanced") : null;

    return true;
  }
}

function properlyBraced(str, debug) {
  const chararr = Array.from(str);
  debug ? console.log("solving for:", chararr) : null;
  if (!isOpenBrace(chararr[0])) {
    //it does not start by opening a brace
    return false;
  } else if (!isCloseBrace(chararr[chararr.length - 1])) {
    // it does not end with closing brace
    return false;
  } else if (!isBalanced(chararr)) {
    // if the braces are unbalanced
    return false;
  } else {
    let stack = [];

    for (let index = 0; index < chararr.length; index++) {
      const element = chararr[index];
      const previousElement = chararr[index - 1];
      const elementIsOpenBrace = isOpenBrace(element);
      if (elementIsOpenBrace) {
        stack.push(chararr.slice(0, index + 1));
        debug ? console.log("index: ", index) : null;
        debug ? console.log("stack: ", stack) : null;
      } else {
        debug ? console.log("Found a closing", chararr[index]) : null;
        let previousStackStep = stack[stack.length - 1];
        debug ? console.log("Previous Step:", previousStackStep) : null;
        debug ? console.log("index: ", index) : null;
        debug ? console.log("stack: ", stack) : null;
        if (
          stack.length > 0 &&
          isOpenBrace(previousStackStep[previousStackStep.length - 1]) === chararr[index]
        ){
          stack.pop();
          debug ? console.log("poped from stack", stack) : null;
        }
      }
    }

    return stack.length === 0;
  }
}

[...expressions,...expressions,...expressions].forEach((exp) => {
  console.time(exp);
  console.log(properlyBraced(exp, false));
  console.timeEnd(exp);
});
